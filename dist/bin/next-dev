#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

require('source-map-support/register');

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _fs = require('mz/fs');

var _server = require('../server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port'
  },
  boolean: ['h'],
  default: {
    p: 3000
  }
});

if (argv.help) {
  console.log('\n    Description\n      Starts the application in development mode (hot-code reloading, error\n      reporting, etc)\n\n    Usage\n      $ next dev <dir> -p <port number>\n\n    <dir> represents where the compiled .next folder should go.\n    If no directory is provided, .next will be created in the current directory\n\n    Options\n      --port, -p      A port number on which to start the application\n      --help, -p      Displays this message\n  ');
  process.exit(0);
}

var dir = (0, _path.resolve)(argv._[0] || '.');

var srv = new _server2.default({ dir: dir, dev: true });
srv.start(argv.port).then((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!process.env.NOW) {
            console.log('> Ready on http://localhost:' + argv.port);
          }

          // Check if pages dir exists and warn if not
          _context.next = 3;
          return (0, _fs.exists)((0, _path.join)(dir, 'pages'));

        case 3:
          if (_context.sent) {
            _context.next = 12;
            break;
          }

          _context.next = 6;
          return (0, _fs.exists)((0, _path.join)(dir, '..', 'pages'));

        case 6:
          if (!_context.sent) {
            _context.next = 10;
            break;
          }

          console.error('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');
          _context.next = 11;
          break;

        case 10:
          console.error('> Couldn\'t find a `pages` directory. Please create one under the project root');

        case 11:
          process.exit(1);

        case 12:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))).catch(function (err) {
  console.error(err);
  process.exit(1);
});